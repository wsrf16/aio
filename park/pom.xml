<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.york.portable</groupId>
    <artifactId>park</artifactId>
    <version>1.1.4-SNAPSHOT</version>
    <packaging>jar</packaging>

    <name>park</name>
    <description>Park project for Spring Boot</description>

    <!--<parent>-->
        <!--<groupId>com.york.portable</groupId>-->
        <!--<artifactId>aio</artifactId>-->
        <!--<version>1.1.4-SNAPSHOT</version>-->
    <!--</parent>-->

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.0.7.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version>
        <swagger.version>2.9.2</swagger.version>
        <springfox-staticdocs.version>2.6.1</springfox-staticdocs.version>
        <assertj-swagger.version>0.8.1</assertj-swagger.version>
        <swagger2markup.version>1.3.1</swagger2markup.version>
        <mysql.version>8.0.11</mysql.version>
        <tk.mybatis.version>1.1.3</tk.mybatis.version>

        <swagger2markup.input.directory>${project.build.directory}/swagger</swagger2markup.input.directory>
        <swagger2markup.swaggerInput>${swagger2markup.input.directory}/swagger.json</swagger2markup.swaggerInput>
        <swagger2markup.output.generated.directory>${project.build.directory}/asciidoc/generated</swagger2markup.output.generated.directory>
        <asciidoctor.input.generated.directory>${swagger2markup.output.generated.directory}</asciidoctor.input.generated.directory>
        <asciidoctor.input.directory>${project.basedir}/src/docs/asciidoc</asciidoctor.input.directory>
        <asciidoctor.output.snippet.directory>${project.build.directory}/asciidoc/snippets</asciidoctor.output.snippet.directory>
        <asciidoctor.output.html.directory>${project.build.directory}/asciidoc/html</asciidoctor.output.html.directory>
        <asciidoctor.output.pdf.directory>${project.build.directory}/asciidoc/pdf</asciidoctor.output.pdf.directory>

        <project-build-finalName>park</project-build-finalName>
        <!--<project.build.finalName>${project.artifactId}${project.version}</project.build.finalName>-->
        <project.build.logName>park</project.build.logName>

        <directory.profile>src/main/profiles/${profiles.active}</directory.profile>
        <assembly-plugin-assembly.descriptor>${project.basedir}/src/main/assembly/assembly.xml</assembly-plugin-assembly.descriptor>


        <!--<argsInject>-javaagent:/opt/pinpoint-agent/pinpoint-bootstrap-1.7.3.jar -Dpinpoint.applicationName=${project.build.finalName} -Dpinpoint.agentId=$ip_addr</argsInject>-->
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-logging</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>com.fasterxml.jackson.core</groupId>
                    <artifactId>jackson-databind</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>com.york.portable</groupId>
            <artifactId>swiss</artifactId>
            <version>1.1.4-SNAPSHOT</version>
        </dependency>

        <!--<dependency>-->
            <!--<groupId>com.york.portable</groupId>-->
            <!--<artifactId>hamlet</artifactId>-->
            <!--<version>1.1.4-SNAPSHOT</version>-->
        <!--</dependency>-->

        <!-- mysql -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>${mysql.version}</version>
        </dependency>
        <!-- sqlserver -->
        <dependency>
            <groupId>com.microsoft.sqlserver</groupId>
            <artifactId>mssql-jdbc</artifactId>
        </dependency>

        <dependency>
            <groupId>com.york.portable</groupId>
            <artifactId>park-db</artifactId>
            <version>1.1.4-SNAPSHOT</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!--<dependency>-->
            <!--<groupId>org.springframework.boot</groupId>-->
            <!--<artifactId>spring-boot-devtools</artifactId>-->
            <!--<scope>provided</scope>-->
            <!--<optional>true</optional>-->
        <!--</dependency>-->

        <!--<dependency>-->
            <!--<groupId>org.springframework.boot</groupId>-->
            <!--<artifactId>spring-boot-starter-actuator</artifactId>-->
        <!--</dependency>-->

        <!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 -->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
            <version>${swagger.version}</version>
            <optional>true</optional>
        </dependency>
        <!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui -->
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
            <version>${swagger.version}</version>
            <optional>true</optional>
        </dependency>

        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-bean-validators</artifactId>
            <version>${swagger.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-staticdocs</artifactId>
            <version>${springfox-staticdocs.version}</version>
        </dependency>
        <!--<dependency>-->
            <!--<groupId>org.springframework.restdocs</groupId>-->
            <!--<artifactId>spring-restdocs-mockmvc</artifactId>-->
            <!--<version>2.0.1.RELEASE</version>-->
            <!--<scope>test</scope>-->
        <!--</dependency>-->
        <!--<dependency>-->
            <!--<groupId>io.github.robwin</groupId>-->
            <!--<artifactId>assertj-swagger</artifactId>-->
            <!--<version>${assertj-swagger.version}</version>-->
            <!--<scope>test</scope>-->
        <!--</dependency>-->


        <!-- https://mvnrepository.com/artifact/com.alibaba/druid-spring-boot-starter -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid-spring-boot-starter</artifactId>
            <version>1.1.10</version>
        </dependency>


        <dependency>
            <groupId>tk.mybatis</groupId>
            <artifactId>mapper-spring-boot-starter</artifactId>
            <version>${tk.mybatis.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-starter-logging</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
    </dependencies>

    <profiles>
        <profile>
            <id>development</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <profiles.active>development</profiles.active>
            </properties>
        </profile>
        <profile>
            <id>test</id>
            <properties>
                <profiles.active>test</profiles.active>
            </properties>
        </profile>
        <profile>
            <id>uat</id>
            <properties>
                <profiles.active>uat</profiles.active>
            </properties>
        </profile>
        <profile>
            <id>production</id>
            <properties>
                <profiles.active>production</profiles.active>
            </properties>
        </profile>
        <profile>
            <id>production-docker</id>
            <properties>
                <profiles.active>production-docker</profiles.active>
            </properties>
        </profile>
    </profiles>

    <build>
        <finalName>${project-build-finalName}</finalName>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
                <includes>
                    <include>**/*</include>
                </includes>
            </resource>
            <resource>
                <directory>src/main/resources</directory>
                <targetPath>conf/</targetPath>
                <filtering>true</filtering>
                <includes>
                    <include>**/*</include>
                </includes>
            </resource>

            <!--<resource>-->
                <!--<directory>src/main/resources/mapper</directory>-->
                <!--<targetPath>mapper/</targetPath>-->
                <!--<filtering>true</filtering>-->
                <!--<includes>-->
                    <!--<include>**/*</include>-->
                <!--</includes>-->
            <!--</resource>-->

            <resource>
                <directory>src/main/profiles</directory>
                <filtering>true</filtering>
                <excludes>
                    <exclude>**/*</exclude>
                </excludes>
            </resource>
            <resource>
                <directory>${directory.profile}</directory>
                <targetPath>conf/</targetPath>
                <filtering>true</filtering>
                <includes>
                    <include>**/*</include>
                </includes>
            </resource>
            <resource>
                <directory>${directory.profile}</directory>
                <targetPath>${project.build.outputDirectory}</targetPath>
                <filtering>true</filtering>
                <includes>
                    <include>**/*</include>
                </includes>
            </resource>
            <resource>
                <directory>${project.build.scriptSourceDirectory}</directory>
                <filtering>true</filtering>
                <excludes>
                    <exclude>**/*</exclude>
                </excludes>
            </resource>
        </resources>

        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.7.0</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                    <skip>true</skip>
                </configuration>
            </plugin>
            <!-- https://mvnrepository.com/artifact/org.apache.maven.plugins/maven-surefire-plugin -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <!--<skipTests>true</skipTests>-->
                    <!--<skipAfterFailureCount>1</skipAfterFailureCount>-->
                    <!--<rerunFailingTestsCount>1</rerunFailingTestsCount>-->
                    <systemPropertyVariables>
                        <test.swagger2markup.input.directory>${swagger2markup.input.directory}</test.swagger2markup.input.directory>
                        <test.asciidoctor.output.snippet.directory>${asciidoctor.output.snippet.directory}</test.asciidoctor.output.snippet.directory>
                    </systemPropertyVariables>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <configuration>
                    <layout>ZIP</layout>
                    <!--<mainClass>${start-class}</mainClass>-->
                    <includes>
                        <include>
                            <groupId>nothing</groupId>
                            <artifactId>nothing</artifactId>
                        </include>
                    </includes>
                </configuration>
            </plugin>
            <plugin>
                <artifactId>maven-assembly-plugin</artifactId>
                <version>3.1.0</version>
                <executions>
                    <execution>
                        <id>make-zip</id>
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                        <configuration>
                            <descriptors>
                                <descriptor>${assembly-plugin-assembly.descriptor}</descriptor>
                            </descriptors>
                        </configuration>
                    </execution>
                </executions>
            </plugin>





            <!-- swagger2markup -->
            <!-- First, use the swagger2markup plugin to generate asciidoc -->
            <plugin>
                <groupId>io.github.swagger2markup</groupId>
                <artifactId>swagger2markup-maven-plugin</artifactId>
                <version>${swagger2markup.version}</version>
                <dependencies>
                    <dependency>
                        <groupId>io.github.swagger2markup</groupId>
                        <artifactId>swagger2markup-import-files-ext</artifactId>
                        <version>${swagger2markup.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>io.github.swagger2markup</groupId>
                        <artifactId>swagger2markup-spring-restdocs-ext</artifactId>
                        <version>${swagger2markup.version}</version>
                    </dependency>
                    <!--&lt;!&ndash; https://mvnrepository.com/artifact/nl.jworks.markdown_to_asciidoc/markdown_to_asciidoc &ndash;&gt;-->
                    <!--<dependency>-->
                        <!--<groupId>nl.jworks.markdown_to_asciidoc</groupId>-->
                        <!--<artifactId>markdown_to_asciidoc</artifactId>-->
                        <!--<version>1.0</version>-->
                    <!--</dependency>-->

                    <!--&lt;!&ndash; https://mvnrepository.com/artifact/ch.netzwerg/paleo-core &ndash;&gt;-->
                    <!--<dependency>-->
                        <!--<groupId>ch.netzwerg</groupId>-->
                        <!--<artifactId>paleo-core</artifactId>-->
                        <!--<version>0.11.0</version>-->
                    <!--</dependency>-->
                </dependencies>
                <configuration>
                    <swaggerInput>${swagger2markup.swaggerInput}</swaggerInput>
                    <outputDir>${swagger2markup.output.generated.directory}</outputDir>
                    <config>
                        <swagger2markup.markupLanguage>ASCIIDOC</swagger2markup.markupLanguage>
                        <swagger2markup.pathsGroupedBy>TAGS</swagger2markup.pathsGroupedBy>

                        <!--<swagger2markup.extensions.dynamicOverview.contentPath>${project.basedir}/src/docs/asciidoc/extensions/overview</swagger2markup.extensions.dynamicOverview.contentPath>-->
                        <!--<swagger2markup.extensions.dynamicDefinitions.contentPath>${project.basedir}/src/docs/asciidoc/extensions/definitions</swagger2markup.extensions.dynamicDefinitions.contentPath>-->
                        <!--<swagger2markup.extensions.dynamicPaths.contentPath>${project.basedir}/src/docs/asciidoc/extensions/paths</swagger2markup.extensions.dynamicPaths.contentPath>-->
                        <!--<swagger2markup.extensions.dynamicSecurity.contentPath>${project.basedir}src/docs/asciidoc/extensions/security/</swagger2markup.extensions.dynamicSecurity.contentPath>-->
                        <!--<swagger2markup.extensions.springRestDocs.snippetBaseUri>${swagger.snippetOutput.dir}</swagger2markup.extensions.springRestDocs.snippetBaseUri>-->
                        <!--<swagger2markup.extensions.springRestDocs.defaultSnippets>true</swagger2markup.extensions.springRestDocs.defaultSnippets>-->
                    </config>
                </configuration>
                <executions>
                    <execution>
                        <phase>test</phase>
                        <goals>
                            <goal>convertSwagger2markup</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- Run the generated asciidoc through Asciidoctor to generate
                 other documentation types, such as PDFs or HTML5 -->
            <plugin>
                <groupId>org.asciidoctor</groupId>
                <artifactId>asciidoctor-maven-plugin</artifactId>
                <version>1.5.3</version>
                <!-- Include Asciidoctor PDF for pdf generation -->
                <dependencies>
                    <dependency>
                        <groupId>org.asciidoctor</groupId>
                        <artifactId>asciidoctorj-pdf</artifactId>
                        <version>1.5.0-alpha.10.1</version>
                    </dependency>
                    <dependency>
                        <groupId>org.jruby</groupId>
                        <artifactId>jruby-complete</artifactId>
                        <version>1.7.21</version>
                    </dependency>
                </dependencies>
                <!-- Configure generic document generation settings -->
                <configuration>
                    <sourceDirectory>${asciidoctor.input.directory}</sourceDirectory>
                    <sourceDocumentName>index.adoc</sourceDocumentName>
                    <attributes>
                        <doctype>book</doctype>
                        <toc>left</toc>
                        <toclevels>3</toclevels>
                        <numbered></numbered>
                        <hardbreaks></hardbreaks>
                        <sectlinks></sectlinks>
                        <sectanchors></sectanchors>
                        <generated>${asciidoctor.input.generated.directory}</generated>
                    </attributes>
                </configuration>
                <!-- Since each execution can only handle one backend, run
                     separate executions for each desired output type -->
                <executions>
                    <execution>
                        <id>output-html</id>
                        <phase>test</phase>
                        <goals>
                            <goal>process-asciidoc</goal>
                        </goals>
                        <configuration>
                            <backend>html5</backend>
                            <outputDirectory>${asciidoctor.output.html.directory}</outputDirectory>
                        </configuration>
                    </execution>

                    <execution>
                        <id>output-pdf</id>
                        <phase>test</phase>
                        <goals>
                            <goal>process-asciidoc</goal>
                        </goals>
                        <configuration>
                            <backend>pdf</backend>
                            <outputDirectory>${asciidoctor.output.pdf.directory}</outputDirectory>
                        </configuration>
                    </execution>

                </executions>
            </plugin>
        </plugins>
    </build>


    <pluginRepositories>
        <pluginRepository>
            <id>spring-plugins</id>
            <name>spring-plugins</name>
            <url>http://repo.spring.io/plugins-release/</url>
        </pluginRepository>
    </pluginRepositories>

</project>
