#!/bin/bash


function mkdirLog() {
  if [[ ! -d $log_dir_absolute_path ]]; then
    mkdir $log_dir_absolute_path
  else
    if [[ -f "${log_gclatest_file_absolute_path}" ]]; then
      cat ${log_gclatest_file_absolute_path} >>${log_gctotal_file_absolute_path}
      rm -f ${log_gclatest_file_absolute_path}
    fi
  fi
}

function getIpAddr() {
  ip_addr=$(ip addr | grep "eth0" | grep 'state UP' -A2 | tail -n1 | awk '{print $2}' | awk -F"/" '{print $1}')
  echo $ip_addr
}

function getExt() {
  _ext=${1##*.}
  echo $_ext
}

function getOnlyFilename() {
  tmp=${1##*/}
  _onlyfilename=${tmp%.*}
  echo $_onlyfilename
}

function getFullFilename() {
  _filename=${1##*/}
  echo $_filename
}

#function getExt() {
#}

function getDirectory() {
  echo ${1%/*}
}

function getSelfFilename() {
  echo ${0##*/}
}

function captureProcessLine() {
  if [[ $operate == "stop" ]]; then
    #                       show line no   except         except         except
    process_line=$(ps -ef | grep -n "$1" | grep -v grep | grep -v kill | grep -v "$shfilename stop" | grep -v "$shfilename forcestop" | grep -v "$shfilename start" | grep -v "$shfilename status" | grep -v "$shfilename restart" | grep -v "$shfilename once")
  else
    process_line=$(ps -ef | grep -n "$1" | grep -v grep | grep -v kill | grep -v "$shfilename stop" | grep -v "$shfilename forcestop" | grep -v "$shfilename start" | grep -v "$shfilename status" | grep -v "$shfilename restart" | grep -v "$shfilename once" | grep -v "$shfilename calldaemon")
  fi
  echo $process_line
}

function markProcess() {
  process_line=$(captureProcessLine $1)

  echo $process_line >>$log_dir_absolute_path/process.log
}

function getPid() {
  process_line=$(captureProcessLine $1)

  pid=($(echo $process_line | awk '{print $2}'))
  if [ "$pid" ]; then
    echo $pid
  else
    echo ''
  fi
}

function isRunning() {
  pid=$(getPid $jar_file_path)
  if [ "$pid" ]; then
    echo true
  else
    echo ""
  fi
}

function run() {
  touch ${log_file_absolute_path}
  #  tail -n ${log_remain_line} ${log_file_absolute_path} > $log_dir_absolute_path/tmp
  #  mv -f $log_dir_absolute_path/tmp ${log_file_absolute_path}
  tail -n ${log_remain_line} ${log_file_absolute_path} >${log_file_absolute_path}
  if [[ $operate == "once" || $operate == "debug" ]]; then
    java $args -Dloader.path="$dir_path/$dirname_dependency,$dir_path/${dirname_config}" -jar $1 2>&1 | tee ${log_file_absolute_path}
  elif [[ $operate == "start" || $operate == "restart" ]]; then
    nohup java $args -Dloader.path="$dir_path/$dirname_dependency,$dir_path/${dirname_config}" -jar $1 >>${log_file_absolute_path} 2>&1 &
  elif [[ $operate == "restartlog" ]]; then
    nohup java $args -Dloader.path="$dir_path/$dirname_dependency,$dir_path/${dirname_config}" -jar $1 >>${log_file_absolute_path} 2>&1 &
    tail -100f ${log_file_absolute_path}
  fi

  #nohup java $args -Dloader.path="$dir_path/$dirname_dependency,$dir_path/${dirname_config}" -jar $1 >>${log_file_absolute_path} 2>&1 &
  #nohup java $args -Dloader.path="$dir_path/$dirname_dependency,$dir_path/${dirname_config}" -jar $1 &

  sleep $check_period
  markProcess $1
}

function calldaemon() {
  echo "current running status..."
  while [ true ]; do
    is=$(isRunning $1)
    if [[ ! ${is} ]]; then
      #$sh_file_path start
      operate="start"
      run $1
      #nohup $sh_file_path start >/dev/null 2>&1 &
      #nohup $0 start >/dev/null 2>&1 &
    fi
    sleep $daemon_check_period
  done
  status $1
}

function status() {
  echo "current running status..."
  is=$(isRunning $1)
  if [[ ${is} ]]; then
    echo "$jar_filename is running."
  else
    echo "$jar_filename is not running."
  fi
}

function once() {
  start $1
}

function start() {
  is=$(isRunning $1)
  if [[ ${is} ]]; then
    #status $1
    echo "nothing happened."
    echo "$jar_filename has been running."
  else
    status $1
    run $1
    status $1
  fi
}

function debug() {
  args="-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=${debug_port} ${args_app}"
  start $1
}

function stop() {
  is=$(isRunning $1)
  while [[ ${is} ]]; do
    status $1
    pid=$(getPid $1)
    if [[ "$pid" ]]; then
      for p in ${pid[@]}; do
        kill -15 $p >/dev/null 2>&1
      done
    else
      break
    fi
    sleep $check_period
    is=$(isRunning $1)
  done
  status $1
}

function forcestop() {
  is=$(isRunning $1)
  while [[ ${is} ]]; do
    status $1
    pid=$(getPid $1)
    if [[ "$pid" ]]; then
      for p in ${pid[@]}; do
        kill -9 $p >/dev/null 2>&1
      done
    else
      break
    fi
    sleep $check_period
    is=$(isRunning $1)
  done
  status $1
}

function restart() {
  operate="stop"
  stop $1
  operate="restart"
  start $1
}

function restartlog() {
  operate="stop"
  stop $1
  operate="restartlog"
  start $1
}

function log() {
  tail -100f ${log_file_absolute_path}
}

function gclog() {
  tail -100f ${log_gctotal_file_absolute_path}
}

function help() {
  echo "cp '-.jar.sh' to '<jarfile>.jar.sh'"
  echo "<jarfile>.jar.sh once"
  echo "<jarfile>.jar.sh debug"
  echo "<jarfile>.jar.sh start"
  echo "<jarfile>.jar.sh daemon"
  echo "<jarfile>.jar.sh restart"
  echo "<jarfile>.jar.sh restartlog"
  echo "<jarfile>.jar.sh stop"
  echo "<jarfile>.jar.sh forcestop"
  echo "<jarfile>.jar.sh status"
  echo "<jarfile>.jar.sh log"

  echo "- once <jarfile>"
  echo "- debug <jarfile>"
  echo "- start <jarfile>"
  echo "- daemon <jarfile>"
  echo "- restart <jarfile>"
  echo "- restartlog <jarfile>"
  echo "- stop <jarfile>"
  echo "- forcestop <jarfile>"
  echo "- status <jarfile>"
  echo "- log <jarfile>"
}

if type -p java > /dev/null; then
    _java=java
  else
    echo "Could not find java executable, please check PATH and JAVA_HOME variables."
    exit 1
fi

jdk_version=$(java -version 2>&1 | awk 'NR==1{ gsub(/"/,""); print $3 }' | grep -P '^\d\.\d' -o)

if [[ -z ${jdk_version} ]]; then
  echo "sorry! jdk is error."
  exit 1
fi

now="$(date +%Y%m%d%H%M%S)"
check_period=2
daemon_check_period=10
log_remain_line=100000
ip_addr=$(getIpAddr)
debug_port=8088

args_app=@args.app@
if [[ "${args_app}" =~ ^@.*@$ ]]; then
  args_app=''
fi

dirname_dependency=@project.deploy.directoryName.dependency@
if [[ "${dirname_dependency}" =~ ^@.*@$ ]]; then
  dirname_dependency=lib/
fi
dirname_config=@project.deploy.directoryName.profile@
if [[ "${dirname_config}" =~ ^@.*@$ ]]; then
  dirname_config=config/
fi
dir_path=$(
  cd $(dirname $0)
  pwd
)

self_filename=$(getSelfFilename)
if [[ ${self_filename} =~ . ]]; then
  if [[ ${self_filename} =~ \.jar\.sh$ ]]; then
    mode="dynamic"
  else
    mode="static"
  fi
else
  echo "sorry! jar_filename is error."
  exit 1
fi


if [[ $mode == "dynamic" ]]; then
#  jar_filename=${self_filename%.*}
  jar_filename=$(getOnlyFilename $self_filename)
  jar_file_path=$dir_path/$jar_filename
  sh_file_path=$dir_path/$self_filename
  dir_path=$(getDirectory ${jar_file_path})
else
  if [[ -z $2 ]]; then
      jar_file_path=$PWD/$(getFullFilename $PWD).jar
    else
      jar_file_path=($(readlink -f $2))
  fi
  jar_filename=$(getFullFilename $jar_file_path)
  sh_file_path=$dir_path/$self_filename
  dir_path=$(getDirectory ${jar_file_path})
fi
log_dir_absolute_path=${dir_path}/log
log_file_absolute_path=/dev/null
log_file_absolute_path=$log_dir_absolute_path/service.log
log_gclatest_file_absolute_path=$log_dir_absolute_path/gc_latest.log
log_gctotal_file_absolute_path=$log_dir_absolute_path/gc_total.log

if [[ $(expr ${jdk_version} \<= 1.8) -eq 1 ]]; then
  args="-Xms512m -Xmx768m -XX:MetaspaceSize=128m -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+HeapDumpOnOutOfMemoryError -Xloggc:${log_gclatest_file_absolute_path} ${args_app}"
elif [[ $(expr ${jdk_version} \> 1.8) -eq 1 ]]; then
  args="-Xms512m -Xmx768m -XX:MetaspaceSize=128m -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -Xlog:gc* -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc:file=${log_gclatest_file_absolute_path}:time,pid,level,tags ${args_app}"
else
  echo "sorry! jdk is error."
  exit 1
fi

operate=$1
if [[ -z ${operate} ]]; then
  help
else
  mkdirLog
  if [[ $operate == "once" ]]; then
    once $jar_file_path
  elif [[ $operate == "debug" ]]; then
    echo "debug: ${args}"
    debug $jar_file_path
  elif [[ $operate == "start" ]]; then
    start $jar_file_path
  elif [[ $operate == "restartlog" ]]; then
    restartlog $jar_file_path
  elif [[ $operate == "daemon" ]]; then
    if [[ $mode == "dynamic" ]]; then
      nohup $sh_file_path calldaemon >/dev/null 2>&1 &
    elif [[ $mode == "static" ]]; then
      nohup $sh_file_path calldaemon $jar_file_path >/dev/null 2>&1 &
    fi
    sleep $check_period
    status $jar_file_path
  elif [[ $operate == "calldaemon" ]]; then
    calldaemon $jar_file_path
  elif [[ $operate == "stop" ]]; then
    stop $jar_file_path
  elif [[ $operate == "forcestop" ]]; then
    forcestop $jar_file_path
  elif [[ $operate == "restart" ]]; then
    restart $jar_file_path
  elif [[ $operate == "status" ]]; then
    status $jar_file_path
  elif [[ $operate == "log" ]]; then
    log
  elif [[ $operate == "gclog" ]]; then
    gclog
  elif [[ $operate == "help" ]]; then
    help
  else
    help
  fi
fi
