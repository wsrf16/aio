#!/bin/bash


function mkdirLog() {
  if [[ ! -d $log_dir ]]; then
    mkdir $log_dir
  else
    if [[ -f "${log_file_gc_latest}" ]]; then
      cat ${log_file_gc_latest} >>${log_file_gc_total}
      rm -f ${log_file_gc_latest}
    fi
  fi
}

function getIpAddr() {
  ip_addr=$(ip addr | grep "eth0" | grep 'state UP' -A2 | tail -n1 | awk '{print $2}' | awk -F"/" '{print $1}')
  echo $ip_addr
}

function getExt() {
  _ext=${1##*.}
  echo $_ext
}

function getOnlyFilename() {
  tmp=${1##*/}
  _onlyfilename=${tmp%.*}
  echo $_onlyfilename
}

function removeExt() {
  _onlyfilename=${1%.*}
  echo $_onlyfilename
}

function getFullFilename() {
  _filename=${1##*/}
  echo $_filename
}

#function getExt() {
#}

function getDirectory() {
  _solutionFilePath=$(readlink -f ${1})
  echo ${_solutionFilePath%/*}
}

function getSelfFilename() {
  echo ${0##*/}
}

function getSelfFile() {
  echo $(readlink -f ${0})
}

function captureProcessLine() {
  if [[ $operate == "stop" ]]; then
    #                       show line no   except         except         except
    process_line=$(ps -ef | grep -n "$1" | grep -v grep | grep -v kill | grep -v "$shfilename stop" | grep -v "$shfilename forcestop" | grep -v "$shfilename start" | grep -v "$shfilename status" | grep -v "$shfilename restart" | grep -v "$shfilename once")
  else
    process_line=$(ps -ef | grep -n "$1" | grep -v grep | grep -v kill | grep -v "$shfilename stop" | grep -v "$shfilename forcestop" | grep -v "$shfilename start" | grep -v "$shfilename status" | grep -v "$shfilename restart" | grep -v "$shfilename once" | grep -v "$shfilename callservice")
  fi
  echo $process_line
}

function markProcess() {
  process_line=$(captureProcessLine $1)

  echo $process_line >>$log_dir/process.log
}

function getPid() {
  process_line=$(captureProcessLine $1)

  pid=($(echo $process_line | awk '{print $2}'))
  if [ "$pid" ]; then
    echo $pid
  else
    echo ""
  fi
}

function isRunning() {
  pid=$(getPid $jar_file)
  if [ "$pid" ]; then
    echo true
  else
    echo ""
  fi
}

function run() {
  touch ${log_file}
  #  tail -n ${log_remain_line} ${log_file} > $log_dir/tmp
  #  mv -f $log_dir/tmp ${log_file}
  tail -n ${log_remain_line} ${log_file} >${log_file}

  echo -e "$ \033[33mjava $param -jar $1 \033[0m"
  if [[ $operate == "once" ]]; then
    java $param -jar $1 2>&1 | tee ${log_file}
  elif [[ $operate == "start" || $operate == "restart" ]]; then
    nohup java $param -jar $1 >>${log_file} 2>&1 &
  elif [[ $operate == "restartlog" ]]; then
    nohup java $param -jar $1 >>${log_file} 2>&1 &
    tail -100f ${log_file}
  fi

  sleep $check_period
  markProcess $1
}

function callservice() {
#  is=$(isRunning $1)
#  if [[ -n ${is} ]]; then
#    echo "nothing happened."
#    echo -e "$jar_filename current status: \033[33mhas been running \033[0m"
#  fi
  while [ true ]; do
    is=$(isRunning $1)
    if [[ ! ${is} ]]; then
      #$sh_file start
      operate="start"
      run $1
      #nohup $sh_file start >/dev/null 2>&1 &
      #nohup $0 start >/dev/null 2>&1 &
    fi
    sleep $service_check_period
  done
  status $1
}

function watch() {
  while [ true ]; do
    status $1
    sleep $service_check_period
  done
}

function status() {
  is=$(isRunning $1)
  pid=$(getPid $jar_file)
  if [[ ${is} ]]; then
    echo -e "$jar_filename current status: \033[32mrunning \033[0m    pid: \033[32m ${pid} \033[0m"
  else
    echo -e "$jar_filename current status: \033[31mstopped \033[0m"
  fi
}

function once() {
  start $1
}

function start() {
  is=$(isRunning $1)
  status $1
  if [[ ${is} ]]; then
    echo -e "\033[33mnothing happened. \033[0m"
  else
    run $1
    status $1
  fi
}

function echoPid() {
  pid=$(getPid $jar_file)
  if [[ -n $pid ]]; then
    echo -e "pid: \033[32m${pid} \033[0m"
  fi
}

function debug() {
  start $1
}

function stop() {
  is=$(isRunning $1)
  status $1
  killed=false
  while [[ ${is} ]]; do
    pid=$(getPid $1)
    if [[ "$pid" ]]; then
      for p in ${pid[@]}; do
        kill -15 $p >/dev/null 2>&1
      done
    else
      break
    fi
    sleep $check_period
    is=$(isRunning $1)
    if [[ -z ${is} ]]; then
      status $1
    fi
  done
}

function forcestop() {
  is=$(isRunning $1)
  while [[ ${is} ]]; do
    status $1
    pid=$(getPid $1)
    if [[ "$pid" ]]; then
      for p in ${pid[@]}; do
        kill -9 $p >/dev/null 2>&1
      done
    else
      break
    fi
    sleep $check_period
    is=$(isRunning $1)
  done
  status $1
}

function restart() {
  operate="stop"
  stop $1
  echo "---"
  operate="restart"
  start $1
}

function restartlog() {
  operate="stop"
  stop $1
  operate="restartlog"
  start $1
}

function log() {
  tail -100f ${log_file}
}

function gclog() {
  tail -100f ${log_file_gc_total}
}

function help() {
  echo -e "\033[33musage:\033[0m"
  _sh='./-'
  _jar='<jar>'
  if [[ $mode == "dynamic" ]]; then
    echo "command:"
    echo "  once debug start service restart restartlog stop forcestop status log"
    echo "option:"
    echo "  -p(--param) \"\" "
    echo "  --debug \"\" "
    echo "eg."
    echo "$ $jar_file.sh once"
#    echo "$ $jar_file.sh debug"
    echo "$ $jar_file.sh start"
    echo "$ $jar_file.sh service"
    echo "$ $jar_file.sh restart"
    echo "$ $jar_file.sh restartlog"
    echo "$ $jar_file.sh stop"
    echo "$ $jar_file.sh forcestop"
    echo "$ $jar_file.sh status"
    echo "$ $jar_file.sh log"
    echo "$ $jar_file.sh gclog"
    echo "or"
    echo "$ cp $jar_file.sh $_sh"
    echo "$ $_sh help"
  else
    echo "$ $sh_file once $_jar"
#    echo "$ $sh_file debug $_jar"
    echo "$ $sh_file start $_jar"
    echo "$ $sh_file service $_jar"
    echo "$ $sh_file restart $_jar"
    echo "$ $sh_file restartlog $_jar"
    echo "$ $sh_file stop $_jar"
    echo "$ $sh_file forcestop $_jar"
    echo "$ $sh_file status $_jar"
    echo "$ $sh_file log $_jar"
    echo "$ $sh_file gclog $_jar"
    echo "or"
    echo "$ cp $sh_file <jar>.sh"
    echo "$ <jar>.sh help"
  fi
}

function get_jdk_version() {
  if type -p java > /dev/null; then
    :
    else
      echo "Could not find java executable, please check PATH and JAVA_HOME variables."
      exit 1
  fi

  jdk_version=$(java -version 2>&1 | awk 'NR==1{ gsub(/"/,""); print $3 }' | grep -P '^\d\.\d' -o)
  if [[ -z ${jdk_version} ]]; then
    echo "sorry! jdk is error."
    exit 1
  fi
  echo "$jdk_version"
}

function get_param_app() {
  param_app=@args.app@
  if [[ "${param_app}" =~ ^@.*@$ ]]; then
    param_app=''
  fi
  echo ${param_app}
}

function get_param_dep() {
  dirname_dependency=@project.deploy.directoryName.dependency@
  if [[ "${dirname_dependency}" =~ ^@.*@$ ]]; then
    dirname_dependency=lib/
  fi
  dirname_config=@project.deploy.directoryName.profile@
  if [[ "${dirname_config}" =~ ^@.*@$ ]]; then
    dirname_config=config/
  fi
  param_dep="-Dloader.path=$jar_dir/$dirname_dependency,$jar_dir/$dirname_config"
  echo $param_dep
}

function get_param_jvm() {
  param_jvm="-XX:MetaspaceSize=128m -XX:+UseG1GC -XX:MaxGCPauseMillis=200"
  if [[ $(expr ${jdk_version} \<= 1.8) -eq 1 ]]; then
    param_jvm="$param_jvm -XX:+PrintGCDetails -XX:+PrintGCDateStamps -XX:+HeapDumpOnOutOfMemoryError -Xloggc:${log_file_gc_latest}"
  elif [[ $(expr ${jdk_version} \> 1.8) -eq 1 ]]; then
    param_jvm="$param_jvm -Xlog:gc* -XX:+HeapDumpOnOutOfMemoryError -Xlog:gc:file=${log_file_gc_latest}:time,pid,level,tags"
  else
    echo "sorry! jdk is error."
    exit 1
  fi
  echo $param_jvm
}



operate=$1
now="$(date +%Y%m%d%H%M%S)"
ip_addr=$(getIpAddr)
jdk_version=$(get_jdk_version)
param_app=$(get_param_app)
check_period=2
service_check_period=10
log_remain_line=100000
debug_port=8088
PARAM_DEBUG="-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=${debug_port}"


sh_dir=$(
  cd $(dirname $0)
  pwd
)

self_filename=$(getSelfFilename)
if [[ ${self_filename} =~ . ]]; then
  if [[ ${self_filename} =~ \.jar\.sh$ ]]; then
    mode="dynamic"
  else
    mode="static"
  fi
else
  echo "sorry! jar_filename is error."
  exit 1
fi


if [[ $mode == "dynamic" ]]; then
#  jar_filename=${self_filename%.*}
  jar_file=$(removeExt $(getSelfFile))
  jar_filename=$(getOnlyFilename $self_filename)
else
  if [[ -z $2 ]]; then
      jar_file=$PWD/$(getFullFilename $PWD).jar
    else
      jar_file=($(readlink -f $2))
  fi
fi
jar_filename=$(getFullFilename $jar_file)
sh_file="$sh_dir/$self_filename"
jar_dir=$(getDirectory ${jar_file})
log_dir=${jar_dir}/log
log_file=/dev/null
log_file=$log_dir/service.log
log_file_gc_latest=$log_dir/gc_latest.log
log_file_gc_total=$log_dir/gc_total.log


param_jvm=$(get_param_jvm)
#param_dep="-Dloader.path=$jar_dir/$dirname_dependency,$jar_dir/$dirname_config"
param_dep=$(get_param_dep)
if [[ -z ${operate} || $operate == "help" ]]; then
  help
  exit 0
else
  while [[ $# -gt 0 ]]; do
    case $1 in
      '--param'|-p)
         shift
         if [[ $# -ne 0 ]]; then
             param_item="${1}"
             param_cmd="$param_cmd $param_item"
         else
             echo -e "Please provide the param. e.g. --param '-Dmaven.test.skip=true' or -p '-Dmaven.test.skip=true'"
             exit 0
         fi
         ;;
      '--compact')
         shift
         param_jvm_memory_compact="-Xms512m -Xmx768m"
         ;;
      '--debug'|-d)
         shift
         param_debug=${PARAM_DEBUG}
         ;;
      *)
         ;;
    esac
    shift
  done
  param="${param_jvm_memory_compact} ${param_jvm} ${param_dep} ${param_app} ${param_cmd} ${param_debug}"



  mkdirLog
  echo -e "java sdk verion: \033[33m$jdk_version\033[0m"
  if [[ $operate == "once" ]]; then
    once $jar_file
  elif [[ $operate == "start" ]]; then
    start $jar_file
  elif [[ $operate == "restartlog" ]]; then
    restartlog $jar_file
  elif [[ $operate == "service" ]]; then
    if [[ $mode == "dynamic" ]]; then
      nohup $sh_file callservice >/dev/null 2>&1 &
    elif [[ $mode == "static" ]]; then
      nohup $sh_file callservice $jar_file >/dev/null 2>&1 &
    fi
    sleep $check_period
    status $jar_file
  elif [[ $operate == "callservice" ]]; then
    callservice $jar_file
  elif [[ $operate == "stop" ]]; then
    stop $jar_file
  elif [[ $operate == "forcestop" ]]; then
    forcestop $jar_file
  elif [[ $operate == "restart" ]]; then
    restart $jar_file
  elif [[ $operate == "status" ]]; then
    status $jar_file
  elif [[ $operate == "watch" ]]; then
    watch $jar_file
  elif [[ $operate == "log" ]]; then
    log
  elif [[ $operate == "gclog" ]]; then
    gclog
  else
    help
    exit 0
  fi
fi
